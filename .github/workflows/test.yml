name: 'TEST [Build & Deploy] core-svc'

on:
  pull_request:
    types:
      - closed
    branches:
      - develop
      - main
    paths:
      - 'apps/core-svc/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true
      branch:
        description: 'Deployment environment (dev/prod)'
        required: true
        type: choice
        options:
          - dev
          - prod

env:
  CLUSTER_NAME: skcc-genai-demo
  APP_NAME: core-svc

jobs:
  build-and-deploy:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: skcc-genai-demo
      APP_NAME: core-svc

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch == 'dev' && 'develop' || github.event.inputs.branch == 'prod' && 'main' || github.event.pull_request.base.ref }}

      - name: Set Environment Variables
        id: set-env
        run: |
          if [[ "${{ github.event.inputs.branch }}" == "prod" ]]; then
            echo "NAMESPACE=genai-system" >> $GITHUB_ENV
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            echo "DEPLOYMENT_NAME=genai-core-svc" >> $GITHUB_ENV
          else
            echo "NAMESPACE=devai-system" >> $GITHUB_ENV
            echo "VERSION=${{ github.event.inputs.version }}-dev" >> $GITHUB_ENV
            echo "DEPLOYMENT_NAME=devai-core-svc" >> $GITHUB_ENV
          fi

      - name: Login ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ vars.ACR_HOST }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: (core)Image Build & Push to ACR
        uses: docker/build-push-action@v5
        with:
          push: true
          context: '{{defaultContext}}:apps/${{ env.APP_NAME }}'
          tags: ${{ vars.ACR_HOST }}/sk-chat-core-svc:${{ env.VERSION }}
          file: Dockerfile

      - name: (clear-k8s)Image Build & Push to ACR
        uses: docker/build-push-action@v5
        with:
          push: true
          context: '{{defaultContext}}:apps/${{ env.APP_NAME }}'
          tags: ${{ vars.ACR_HOST }}/sk-chat-clear-core:${{ env.VERSION }}
          file: Dockerfile.batch

      - name: (core)AKS Deployment Image Change
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: -n ${{ env.NAMESPACE }} set image deploy ${{ env.DEPLOYMENT_NAME }} ${{ env.APP_NAME }}=${{ vars.ACR_HOST }}/sk-chat-core-svc:${{ env.VERSION }}

      - name: (clear-k8s)AKS Deployment Image Change
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: -n ${{ env.NAMESPACE }} set image cronjob clear-core clear=${{ vars.ACR_HOST }}/sk-chat-clear-core:${{ env.VERSION }}

      - name: AKS Get Deployments
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: -n ${{ env.NAMESPACE }} get deploy -o wide

      - name: AKS Rollout Deployments
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: -n ${{ env.NAMESPACE }} rollout restart deployment/${{ env.DEPLOYMENT_NAME }}

      - name: AKS Get pods
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: -n ${{ env.NAMESPACE }} get pods
